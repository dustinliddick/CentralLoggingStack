##########
# SYSLOG #
##########
filter { 
	  # strip the syslog PRI part and create facility and severity fields.
	  # the original syslog message is saved in field %{syslog_raw_message}.
	  # the extracted PRI is available in the %{syslog_pri} field.
	  # 
	  # You get %{syslog_facility_code} and %{syslog_severity_code} fields.
	  # You also get %{syslog_facility} and %{syslog_severity} fields if the
	  # use_labels option is set True (the default) on syslog_pri filter.
	if [type] == "redhat" {
			 add_tag => "got_syslog_pri"
			 add_field => [ "syslog_raw_message", "%{@message}" ]
  }
		grok {
			break_on_match => false
			patterns_dir => [ "/etc/logstash/patterns/" ] 
			pattern => [ "<%{POSINT:syslog_pri}>%{SPACE}%{GREEDYDATA:message_remainder}" ]
			match => [ "message", "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" ]
			add_field => [ "received_at", "%{@timestamp}" ]
			add_field => [ "received_from", "%{SYSLOGHOST}" ]
		}
		dns {
			reverse => [ "hostname" ]
		}
		syslog_pri { }
		date {
			match => [ "syslog_timestamp", "MMM d HH:mm:ss", "MMM dd HH:mm:ss" ]
		}
    if !("_grokparsefailure" in [tags]) {
		mutate {
			replace => [ "host", "%{syslog_hostname}" ]
			replace => [ "@source_host", "%{syslog_hostname}" ]
			replace => [ "@message", "%{syslog_message}" ]
		}
	}
  }
}
##############
# END SYSLOG #
##############
